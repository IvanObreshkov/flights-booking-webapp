[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "api.database",
        "description": "api.database",
        "isExtraImport": true,
        "detail": "api.database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "api.database",
        "description": "api.database",
        "isExtraImport": true,
        "detail": "api.database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "api.database",
        "description": "api.database",
        "isExtraImport": true,
        "detail": "api.database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "api.database",
        "description": "api.database",
        "isExtraImport": true,
        "detail": "api.database",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "get_flight",
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "isExtraImport": true,
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "expects_json",
        "importPath": "flask_expects_json",
        "description": "flask_expects_json",
        "isExtraImport": true,
        "detail": "flask_expects_json",
        "documentation": {}
    },
    {
        "label": "expects_json",
        "importPath": "flask_expects_json",
        "description": "flask_expects_json",
        "isExtraImport": true,
        "detail": "flask_expects_json",
        "documentation": {}
    },
    {
        "label": "expects_json",
        "importPath": "flask_expects_json",
        "description": "flask_expects_json",
        "isExtraImport": true,
        "detail": "flask_expects_json",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Flights",
        "importPath": "models.flights_model",
        "description": "models.flights_model",
        "isExtraImport": true,
        "detail": "models.flights_model",
        "documentation": {}
    },
    {
        "label": "Flights",
        "importPath": "models.flights_model",
        "description": "models.flights_model",
        "isExtraImport": true,
        "detail": "models.flights_model",
        "documentation": {}
    },
    {
        "label": "UserBookings",
        "importPath": "models.user_bookings_model",
        "description": "models.user_bookings_model",
        "isExtraImport": true,
        "detail": "models.user_bookings_model",
        "documentation": {}
    },
    {
        "label": "UserBookings",
        "importPath": "models.user_bookings_model",
        "description": "models.user_bookings_model",
        "isExtraImport": true,
        "detail": "models.user_bookings_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models.users_model",
        "description": "models.users_model",
        "isExtraImport": true,
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models.users_model",
        "description": "models.users_model",
        "isExtraImport": true,
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models.users_model",
        "description": "models.users_model",
        "isExtraImport": true,
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models.users_model",
        "description": "models.users_model",
        "isExtraImport": true,
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models.users_model",
        "description": "models.users_model",
        "isExtraImport": true,
        "detail": "models.users_model",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "admin_or_user_id_required",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerError",
        "importPath": "werkzeug.exceptions",
        "description": "werkzeug.exceptions",
        "isExtraImport": true,
        "detail": "werkzeug.exceptions",
        "documentation": {}
    },
    {
        "label": "Flights",
        "importPath": "api.models.flights_model",
        "description": "api.models.flights_model",
        "isExtraImport": true,
        "detail": "api.models.flights_model",
        "documentation": {}
    },
    {
        "label": "UserBookings",
        "importPath": "api.models.user_bookings_model",
        "description": "api.models.user_bookings_model",
        "isExtraImport": true,
        "detail": "api.models.user_bookings_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "api.models.users_model",
        "description": "api.models.users_model",
        "isExtraImport": true,
        "detail": "api.models.users_model",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "api.utils",
        "description": "api.utils",
        "isExtraImport": true,
        "detail": "api.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "flask_bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "DevConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "crud_bookings_bp",
        "importPath": "routes.crud_bookings_route",
        "description": "routes.crud_bookings_route",
        "isExtraImport": true,
        "detail": "routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "crud_flights_bp",
        "importPath": "routes.crud_flights_route",
        "description": "routes.crud_flights_route",
        "isExtraImport": true,
        "detail": "routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "login_bp",
        "importPath": "routes.login_route",
        "description": "routes.login_route",
        "isExtraImport": true,
        "detail": "routes.login_route",
        "documentation": {}
    },
    {
        "label": "rud_users_bp",
        "importPath": "routes.rud_users_route",
        "description": "routes.rud_users_route",
        "isExtraImport": true,
        "detail": "routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "register_bp",
        "importPath": "routes.register_route",
        "description": "routes.register_route",
        "isExtraImport": true,
        "detail": "routes.register_route",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "database_exists",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "create_database",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.drop_index('flight_number')\n    op.drop_table('flights')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('flights',\n    sa.Column('flight_number', mysql.VARCHAR(length=6), nullable=False),",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('flights',\n    sa.Column('flight_number', mysql.VARCHAR(length=6), nullable=False),\n    sa.Column('start_destination', mysql.VARCHAR(length=255), nullable=False),\n    sa.Column('end_destination', mysql.VARCHAR(length=255), nullable=False),\n    sa.Column('takeoff_time', mysql.INTEGER(), autoincrement=False, nullable=False),\n    sa.Column('landing_time', mysql.INTEGER(), autoincrement=False, nullable=False),\n    sa.PrimaryKeyConstraint('flight_number'),\n    mysql_default_charset='utf8mb3',",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "revision = '227e3b33bab9'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.drop_index('flight_number')\n    op.drop_table('flights')\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.drop_index('flight_number')\n    op.drop_table('flights')\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.drop_index('flight_number')\n    op.drop_table('flights')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "description": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.drop_index('flight_number')\n    op.drop_table('flights')\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('flights',",
        "detail": "api.migrations.versions.227e3b33bab9_reorganize_project",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.VARCHAR(length=255),\n               type_=sa.LargeBinary(length=60),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=sa.LargeBinary(length=60),\n               type_=mysql.VARCHAR(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "revision = '31523218f691'\ndown_revision = '227e3b33bab9'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.VARCHAR(length=255),\n               type_=sa.LargeBinary(length=60),",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "down_revision = '227e3b33bab9'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.VARCHAR(length=255),\n               type_=sa.LargeBinary(length=60),\n               existing_nullable=False)",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.VARCHAR(length=255),\n               type_=sa.LargeBinary(length=60),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "description": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.VARCHAR(length=255),\n               type_=sa.LargeBinary(length=60),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.31523218f691_change_password_column_type_from_string_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('price', sa.Double(), nullable=False))\n        batch_op.alter_column('takeoff_time',\n               existing_type=mysql.INTEGER(),\n               type_=sa.String(length=16),\n               existing_nullable=False)\n        batch_op.alter_column('landing_time',\n               existing_type=mysql.INTEGER(),",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.alter_column('landing_time',\n               existing_type=sa.String(length=16),\n               type_=mysql.INTEGER(),\n               existing_nullable=False)\n        batch_op.alter_column('takeoff_time',\n               existing_type=sa.String(length=16),\n               type_=mysql.INTEGER(),",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "revision = '3902dc5837e2'\ndown_revision = 'b93f7ce62210'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('price', sa.Double(), nullable=False))\n        batch_op.alter_column('takeoff_time',\n               existing_type=mysql.INTEGER(),",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "down_revision = 'b93f7ce62210'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('price', sa.Double(), nullable=False))\n        batch_op.alter_column('takeoff_time',\n               existing_type=mysql.INTEGER(),\n               type_=sa.String(length=16),",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('price', sa.Double(), nullable=False))\n        batch_op.alter_column('takeoff_time',\n               existing_type=mysql.INTEGER(),\n               type_=sa.String(length=16),\n               existing_nullable=False)",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "description": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('flights', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('price', sa.Double(), nullable=False))\n        batch_op.alter_column('takeoff_time',\n               existing_type=mysql.INTEGER(),\n               type_=sa.String(length=16),\n               existing_nullable=False)\n        batch_op.alter_column('landing_time',",
        "detail": "api.migrations.versions.3902dc5837e2_add_price_column_change_datetime_format_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=mysql.VARCHAR(length=10),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=sa.String(length=255),\n               type_=mysql.VARCHAR(length=10),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "revision = '4d5f826c5dc8'\ndown_revision = '3902dc5837e2'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=mysql.VARCHAR(length=10),\n               type_=sa.String(length=255),",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "down_revision = '3902dc5837e2'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=mysql.VARCHAR(length=10),\n               type_=sa.String(length=255),\n               existing_nullable=False)",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=mysql.VARCHAR(length=10),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "description": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.alter_column('booking_id',\n               existing_type=mysql.VARCHAR(length=10),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.4d5f826c5dc8_fix_booking_id_length",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='foreignkey')\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='foreignkey')\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "revision = 'b93f7ce62210'\ndown_revision = 'f549f5f9646d'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "down_revision = 'f549f5f9646d'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "description": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('user_bookings', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='foreignkey')",
        "detail": "api.migrations.versions.b93f7ce62210_create_many_to_many_between_users_and_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.create_unique_constraint(None, ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='unique')\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='unique')\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "revision = 'e21e4aa65be5'\ndown_revision = '4d5f826c5dc8'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.create_unique_constraint(None, ['id'])\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "down_revision = '4d5f826c5dc8'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.create_unique_constraint(None, ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.create_unique_constraint(None, ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "description": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.create_unique_constraint(None, ['id'])\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.drop_constraint(None, type_='unique')",
        "detail": "api.migrations.versions.e21e4aa65be5_remove_user_bookings_when_user_is_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.TINYBLOB(),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=sa.String(length=255),\n               type_=mysql.TINYBLOB(),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "revision = 'f549f5f9646d'\ndown_revision = '31523218f691'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.TINYBLOB(),\n               type_=sa.String(length=255),",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "down_revision = '31523218f691'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.TINYBLOB(),\n               type_=sa.String(length=255),\n               existing_nullable=False)",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.TINYBLOB(),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "description": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    with op.batch_alter_table('users', schema=None) as batch_op:\n        batch_op.alter_column('password',\n               existing_type=mysql.TINYBLOB(),\n               type_=sa.String(length=255),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "api.migrations.versions.f549f5f9646d_change_hashed_password_type_from_bytes_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except TypeError:\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "api.migrations.env",
        "description": "api.migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "api.migrations.env",
        "documentation": {}
    },
    {
        "label": "Flights",
        "kind": 6,
        "importPath": "api.models.flights_model",
        "description": "api.models.flights_model",
        "peekOfCode": "class Flights(db.Model):\n    __tablename__ = \"flights\"\n    flight_number = sqlalchemy.Column(sqlalchemy.String(6), primary_key=True,\n                                      nullable=False, unique=True)\n    start_destination = sqlalchemy.Column(sqlalchemy.String(255),\n                                          nullable=False)\n    end_destination = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n    takeoff_time = sqlalchemy.Column(sqlalchemy.String(16), nullable=False)\n    landing_time = sqlalchemy.Column(sqlalchemy.String(16), nullable=False)\n    price = sqlalchemy.Column(sqlalchemy.Double, nullable=False)",
        "detail": "api.models.flights_model",
        "documentation": {}
    },
    {
        "label": "UserBookings",
        "kind": 6,
        "importPath": "api.models.user_bookings_model",
        "description": "api.models.user_bookings_model",
        "peekOfCode": "class UserBookings(db.Model):\n    __tablename__ = \"user_bookings\"\n    booking_id = sqlalchemy.Column(sqlalchemy.String(255), primary_key=True,\n                                   unique=True)\n    flight_number = sqlalchemy.Column(ForeignKey('flights.flight_number'),\n                                      primary_key=True)\n    user_id = sqlalchemy.Column(ForeignKey('users.id'), primary_key=True)\n    users = relationship(\"Users\", back_populates=\"user_bookings\")\n    flights = relationship(\"Flights\", back_populates=\"user_bookings\")\n    # FIXME",
        "detail": "api.models.user_bookings_model",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "api.models.users_model",
        "description": "api.models.users_model",
        "peekOfCode": "class Users(db.Model):\n    __tablename__ = \"users\"\n    id = sqlalchemy.Column(sqlalchemy.String(36), primary_key=True,\n                           nullable=False, unique=True)\n    first_name = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n    last_name = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n    email = sqlalchemy.Column(sqlalchemy.String(255), nullable=False,\n                              unique=True)\n    password = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n    user_bookings = relationship(\"UserBookings\", back_populates=\"users\",",
        "detail": "api.models.users_model",
        "documentation": {}
    },
    {
        "label": "TestFlightsRoute",
        "kind": 6,
        "importPath": "api.routes.tests.test_flights_route",
        "description": "api.routes.tests.test_flights_route",
        "peekOfCode": "class TestFlightsRoute:\n    class MockFlight:\n        def __init__(self, obj): \n            self.__flight = obj\n        def to_json(self):\n            return self.__flight\n    def test_flights_route__get_flight__flight_exists(self, mocker):\n        flight = {\"number\": \"some_number\", \"to\": \"somewhere\", \"from\": \"somewhere\"}\n        mocked_flight = TestFlightsRoute.MockFlight(flight)\n        mock_flights = mocker.patch(\"api.database.db.session.query\")",
        "detail": "api.routes.tests.test_flights_route",
        "documentation": {}
    },
    {
        "label": "mock_decorator",
        "kind": 2,
        "importPath": "api.routes.tests.test_flights_route",
        "description": "api.routes.tests.test_flights_route",
        "peekOfCode": "def mock_decorator(func):\n    return func\npatch('api.utils.admin_required', mock_decorator).start()\nfrom api.routes.crud_flights_route import get_flight\nclass TestFlightsRoute:\n    class MockFlight:\n        def __init__(self, obj): \n            self.__flight = obj\n        def to_json(self):\n            return self.__flight",
        "detail": "api.routes.tests.test_flights_route",
        "documentation": {}
    },
    {
        "label": "add_booking",
        "kind": 2,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "def add_booking():\n    try:\n        json_data = request.json\n        user_id = json_data[\"user_id\"]\n        flight_number = json_data[\"flight_number\"]\n        user = db.session.query(Users).get(user_id)\n        flight = db.session.query(Flights).get(flight_number)\n        if user and flight:\n            existing_booking = db.session.query(UserBookings).filter_by(user_id=user_id, flight_number=flight_number).all()\n            if not existing_booking:",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "get_bookings",
        "kind": 2,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "def get_bookings():\n    try:\n        all_bookings = db.session.query(UserBookings). \\\n            join(UserBookings.users). \\\n            join(UserBookings.flights). \\\n            with_entities(UserBookings.booking_id, Flights.flight_number, Flights.price, Users.email, Users.first_name,\n                          Users.last_name). \\\n            all()\n        # When querying individual rows the row is a KeyedTuple which has an _asdict method\n        bookings = [booking._asdict() for booking in all_bookings]",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "get_user_bookings",
        "kind": 2,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "def get_user_bookings(user_id):\n    try:\n        user = db.session.query(Users).get(user_id)\n        if user:\n            all_user_bookings = db.session.query(UserBookings). \\\n                join(UserBookings.users). \\\n                join(UserBookings.flights). \\\n                with_entities(UserBookings.booking_id, Flights.flight_number, Flights.start_destination,\n                              Flights.end_destination, Flights.takeoff_time, Flights.takeoff_time, Flights.price,\n                              Users.email,",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "delete_booking",
        "kind": 2,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "def delete_booking(booking_id):\n    try:\n        booking = db.session.query(UserBookings).filter_by(booking_id=str(booking_id)).first()\n        if booking:\n            db.session.delete(booking)\n            db.session.commit()\n            return {\"Message\": f\"User with uuid {booking_id} was removed successfully from the DB\"}, 200\n        return {\"Message\": f\"Booking with uuid {booking_id} doesn't exist in the DB!\"}, 404\n    except Exception as e:\n        db.session.rollback()",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "crud_bookings_bp",
        "kind": 5,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "crud_bookings_bp = Blueprint(\"bookings\", __name__)\nbookings_schema = {\n    'type': 'object',\n    'properties': {\n        'flight_number': {'type': 'string'},\n        'user_id': {'type': 'string'},\n    },\n    'required': ['flight_number', 'user_id'],\n    'additionalProperties': False\n}",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "bookings_schema",
        "kind": 5,
        "importPath": "api.routes.crud_bookings_route",
        "description": "api.routes.crud_bookings_route",
        "peekOfCode": "bookings_schema = {\n    'type': 'object',\n    'properties': {\n        'flight_number': {'type': 'string'},\n        'user_id': {'type': 'string'},\n    },\n    'required': ['flight_number', 'user_id'],\n    'additionalProperties': False\n}\n@crud_bookings_bp.post(\"/bookings\")",
        "detail": "api.routes.crud_bookings_route",
        "documentation": {}
    },
    {
        "label": "add_flight",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def add_flight():\n    try:\n        json_data = request.json\n        start_destination = json_data[\"start_destination\"]\n        end_destination = json_data[\"end_destination\"]\n        takeoff_time = json_data[\"takeoff_time\"]\n        landing_time = json_data['landing_time']\n        price = json_data['price']\n        existing_flight = db.session.query(Flights).filter_by(start_destination=start_destination,\n                                                              end_destination=end_destination,",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "get_flights",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def get_flights():\n    try:\n        all_flights = db.session.query(Flights).all()\n        users_list = [flight.to_json() for flight in all_flights]\n        return {\"Flights\": users_list}, 200\n    except Exception as e:\n        return {\"Message\": \"Couldn't retrieve flights from DB!\", \"Error\": str(e)}, 500\n    finally:\n        db.session.close()\n@crud_flights_bp.get(\"/flights/<flight_number>\")",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "get_flight",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def get_flight(flight_number):\n    try:\n        flight = db.session.query(Flights).get(flight_number)\n        if flight:\n            return {\"Flight\": flight.to_json()}, 200\n        return {\"Message\": f\"Flight with uuid {flight_number} doesn't exist in the DB!\"}, 404\n    except Exception as e:\n        return {\"Message\": f\"Couldn't retrieve flight with number {flight_number} from DB!\", \"Error\": str(e)}, 500\n    finally:\n        db.session.close()",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "get_flight_passengers",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def get_flight_passengers(flight_number):\n    try:\n        flight = db.session.query(Flights).get(flight_number)\n        if flight:\n            all_passengers = db.session.query(UserBookings). \\\n                join(UserBookings.users). \\\n                join(UserBookings.flights). \\\n                with_entities(UserBookings.booking_id,\n                              Users.id,\n                              Users.email,",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def delete_user(flight_number_uuid):\n    try:\n        user = db.session.query(Flights).get(flight_number_uuid)\n        if user:\n            db.session.delete(user)\n            db.session.commit()\n            return {\"Message\": f\"Flight with number: {flight_number_uuid} was removed successfully from the DB\"}, 200\n        return {\"Message\": f\"Flight with number: {flight_number_uuid} doesn't exist in the DB!\"}, 404\n    except Exception as e:\n        db.session.rollback()",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "update_flight",
        "kind": 2,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "def update_flight(flight_number_uuid):\n    try:\n        flight = db.session.query(Flights).get(flight_number_uuid)\n        if flight:\n            json_data = request.json\n            flight.start_destination = json_data.get('start_destination', flight.start_destination)\n            flight.end_destination = json_data.get('end_destination', flight.end_destination)\n            flight.takeoff_time = json_data.get('takeoff_time', flight.takeoff_time)\n            flight.landing_time = json_data.get('landing_time', flight.landing_time)\n            flight.price = json_data.get('price', flight.price)",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "crud_flights_bp",
        "kind": 5,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "crud_flights_bp = Blueprint(\"flights\", __name__)\nflights_schema = {\n    'type': 'object',\n    'properties': {\n        'start_destination': {'type': 'string'},\n        'end_destination': {'type': 'string'},\n        'takeoff_time': {'type': 'string',\n                         'pattern': '^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$',\n                         'examples': [\"2023-06-12 15:30\"]\n                         },",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "flights_schema",
        "kind": 5,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "flights_schema = {\n    'type': 'object',\n    'properties': {\n        'start_destination': {'type': 'string'},\n        'end_destination': {'type': 'string'},\n        'takeoff_time': {'type': 'string',\n                         'pattern': '^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$',\n                         'examples': [\"2023-06-12 15:30\"]\n                         },\n        'landing_time': {'type': 'string',",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "update_flight_schema",
        "kind": 5,
        "importPath": "api.routes.crud_flights_route",
        "description": "api.routes.crud_flights_route",
        "peekOfCode": "update_flight_schema = {\n    'type': 'object',\n    'properties': {\n        'start_destination': {'type': 'string'},\n        'end_destination': {'type': 'string'},\n        'takeoff_time': {'type': 'string',\n                         'pattern': '^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$',\n                         'examples': [\"2023-06-12 15:30\"]\n                         },\n        'landing_time': {'type': 'string',",
        "detail": "api.routes.crud_flights_route",
        "documentation": {}
    },
    {
        "label": "login_users",
        "kind": 2,
        "importPath": "api.routes.login_route",
        "description": "api.routes.login_route",
        "peekOfCode": "def login_users():\n    email = request.form[\"email\"]\n    raw_password = request.form[\"password\"]\n    for key in request.form:\n        email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b'\n        if request.form[key].strip() == '':\n            key_to_text_list = key.split('_')\n            key_to_text = ' '.join(key_to_text_list)\n            new_key = key_to_text.capitalize()\n            return render_template('login.html', msg=f'{new_key} cannot be empty!')",
        "detail": "api.routes.login_route",
        "documentation": {}
    },
    {
        "label": "get_login_form",
        "kind": 2,
        "importPath": "api.routes.login_route",
        "description": "api.routes.login_route",
        "peekOfCode": "def get_login_form():\n    return render_template(\"login.html\"), 200",
        "detail": "api.routes.login_route",
        "documentation": {}
    },
    {
        "label": "login_bp",
        "kind": 5,
        "importPath": "api.routes.login_route",
        "description": "api.routes.login_route",
        "peekOfCode": "login_bp = Blueprint(\"login\", __name__)\nload_dotenv()\nlogin_schema = {\n    'type': 'object',\n    'properties': {\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'required': ['email', 'password'],\n    'additionalProperties': False",
        "detail": "api.routes.login_route",
        "documentation": {}
    },
    {
        "label": "login_schema",
        "kind": 5,
        "importPath": "api.routes.login_route",
        "description": "api.routes.login_route",
        "peekOfCode": "login_schema = {\n    'type': 'object',\n    'properties': {\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'required': ['email', 'password'],\n    'additionalProperties': False\n}\n@login_bp.post(\"/login\")",
        "detail": "api.routes.login_route",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 2,
        "importPath": "api.routes.register_route",
        "description": "api.routes.register_route",
        "peekOfCode": "def register_user():\n    try:\n        data = request.form\n        first_name = data[\"first_name\"]\n        last_name = data[\"last_name\"]\n        email = data[\"email\"]\n        password = data[\"password\"]\n        for key in data:\n            email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,7}\\b'\n            if data[key].strip() == '':",
        "detail": "api.routes.register_route",
        "documentation": {}
    },
    {
        "label": "get_register_form",
        "kind": 2,
        "importPath": "api.routes.register_route",
        "description": "api.routes.register_route",
        "peekOfCode": "def get_register_form():\n    return render_template(\"register.html\"), 200",
        "detail": "api.routes.register_route",
        "documentation": {}
    },
    {
        "label": "register_bp",
        "kind": 5,
        "importPath": "api.routes.register_route",
        "description": "api.routes.register_route",
        "peekOfCode": "register_bp = Blueprint(\"register\", __name__)\nschema = {\n    'type': 'object',\n    'properties': {\n        'first_name': {'type': 'string'},\n        'last_name': {'type': 'string'},\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'required': ['first_name', 'last_name', 'email', 'password'],",
        "detail": "api.routes.register_route",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "api.routes.register_route",
        "description": "api.routes.register_route",
        "peekOfCode": "schema = {\n    'type': 'object',\n    'properties': {\n        'first_name': {'type': 'string'},\n        'last_name': {'type': 'string'},\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'required': ['first_name', 'last_name', 'email', 'password'],\n    'additionalProperties': False",
        "detail": "api.routes.register_route",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "def get_users():\n    try:\n        all_users = db.session.query(Users).all()\n        users_list = [user.to_json() for user in all_users]\n        return {\"Users\": users_list}, 200\n    except Exception as e:\n        return {\"Message\": \"Couldn't retrieve users from DB!\", \"Error\": str(e)}, 500\n    finally:\n        db.session.close()\n@rud_users_bp.get(\"/users/<uuid:user_uuid>\")",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "def get_user(user_uuid):\n    try:\n        user = db.session.query(Users).get(user_uuid)\n        if user:\n            return {\"User\": user.to_json()}, 200\n        return {\"Message\": f\"User with uuid {user_uuid} doesn't exist in the DB!\"}, 404\n    except Exception as e:\n        return {\"Message\": f\"Couldn't retrieve user with uuid {user_uuid} from DB!\", \"Error\": str(e)}, 500\n    finally:\n        db.session.close()",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "def delete_user(user_uuid):\n    try:\n        user = db.session.query(Users).get(user_uuid)\n        if user:\n            db.session.delete(user)\n            db.session.commit()\n            return {\"Message\": f\"User with uuid {user_uuid} was removed successfully from the DB\"}, 200\n        return {\"Message\": f\"User with uuid {user_uuid} doesn't exist in the DB!\"}, 404\n    except Exception as e:\n        db.session.rollback()",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "def update_user(user_uuid):\n    try:\n        user = db.session.query(Users).get(user_uuid)\n        if user:\n            json_data = request.json\n            user.first_name = json_data.get('first_name', user.first_name)\n            user.last_name = json_data.get('last_name', user.last_name)\n            user.email = json_data.get('email', user.email)\n            user.password = json_data.get('password', user.password)\n            db.session.commit()",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "rud_users_bp",
        "kind": 5,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "rud_users_bp = Blueprint(\"crud_users\", __name__)\nschema = {\n    'type': 'object',\n    'properties': {\n        'first_name': {'type': 'string'},\n        'last_name': {'type': 'string'},\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'additionalProperties': False",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "api.routes.rud_users_route",
        "description": "api.routes.rud_users_route",
        "peekOfCode": "schema = {\n    'type': 'object',\n    'properties': {\n        'first_name': {'type': 'string'},\n        'last_name': {'type': 'string'},\n        'email': {'type': 'string', 'format': 'email'},\n        'password': {'type': 'string'}\n    },\n    'additionalProperties': False\n}",
        "detail": "api.routes.rud_users_route",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "def create_app(config_class=DevConfig):\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object(config_class)\n    app.register_blueprint(register_bp)\n    app.register_blueprint(rud_users_bp)\n    app.register_blueprint(crud_flights_bp)\n    app.register_blueprint(crud_bookings_bp)\n    app.register_blueprint(login_bp)\n    db.init_app(app)\n    with app.app_context():",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "migrate = Migrate()\ndef create_app(config_class=DevConfig):\n    app = Flask(__name__, instance_relative_config=True)\n    app.config.from_object(config_class)\n    app.register_blueprint(register_bp)\n    app.register_blueprint(rud_users_bp)\n    app.register_blueprint(crud_flights_bp)\n    app.register_blueprint(crud_bookings_bp)\n    app.register_blueprint(login_bp)\n    db.init_app(app)",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "DevConfig",
        "kind": 6,
        "importPath": "api.config",
        "description": "api.config",
        "peekOfCode": "class DevConfig:\n    SECRET_KEY = os.getenv(\"SECRET_KEY\")\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"MYSQL_DATABASE_URI\")",
        "detail": "api.config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "api.database",
        "description": "api.database",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "api.database",
        "documentation": {}
    },
    {
        "label": "db_uri",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "db_uri = os.getenv(\"MYSQL_DATABASE_URI\")\nengine = create_engine(db_uri)\nif not database_exists(engine.url):\n    create_database(engine.url)\n# Create a session\nSession = sessionmaker(bind=engine)\nsession = Session()\n# Create tables if they don't exist\nFlights.metadata.create_all(engine)\nUsers.metadata.create_all(engine)",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "engine = create_engine(db_uri)\nif not database_exists(engine.url):\n    create_database(engine.url)\n# Create a session\nSession = sessionmaker(bind=engine)\nsession = Session()\n# Create tables if they don't exist\nFlights.metadata.create_all(engine)\nUsers.metadata.create_all(engine)\nUserBookings.metadata.create_all(engine)",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "Session = sessionmaker(bind=engine)\nsession = Session()\n# Create tables if they don't exist\nFlights.metadata.create_all(engine)\nUsers.metadata.create_all(engine)\nUserBookings.metadata.create_all(engine)\n# Seed data for Flights\nflights_data = [\n    {\"start_destination\": \"London\", \"end_destination\": \"Sofia\", \"takeoff_time\": \"2023-07-30 06:45\",\n     \"landing_time\": \"2023-07-30 09:15\", \"price\": 235.70, \"flight_number\": str(uuid.uuid4().hex)[:6].upper()},",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "session = Session()\n# Create tables if they don't exist\nFlights.metadata.create_all(engine)\nUsers.metadata.create_all(engine)\nUserBookings.metadata.create_all(engine)\n# Seed data for Flights\nflights_data = [\n    {\"start_destination\": \"London\", \"end_destination\": \"Sofia\", \"takeoff_time\": \"2023-07-30 06:45\",\n     \"landing_time\": \"2023-07-30 09:15\", \"price\": 235.70, \"flight_number\": str(uuid.uuid4().hex)[:6].upper()},\n    {\"start_destination\": \"Paris\", \"end_destination\": \"Rome\", \"takeoff_time\": \"2023-08-03 11:35\",",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "flights_data",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "flights_data = [\n    {\"start_destination\": \"London\", \"end_destination\": \"Sofia\", \"takeoff_time\": \"2023-07-30 06:45\",\n     \"landing_time\": \"2023-07-30 09:15\", \"price\": 235.70, \"flight_number\": str(uuid.uuid4().hex)[:6].upper()},\n    {\"start_destination\": \"Paris\", \"end_destination\": \"Rome\", \"takeoff_time\": \"2023-08-03 11:35\",\n     \"landing_time\": \"2023-08-03 13:10\", \"price\": 273.40, \"flight_number\": str(uuid.uuid4().hex)[:6].upper()},\n    {\"start_destination\": \"Berlin\", \"end_destination\": \"Skopje\", \"takeoff_time\": \"2023-07-17 16:00\",\n     \"landing_time\": \"2023-07-17 18:20\", \"price\": 179.90, \"flight_number\": str(uuid.uuid4().hex)[:6].upper()},\n]\nfor flight in flights_data:\n    new_flight = Flights(",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "users_data",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "users_data = [\n    {\n        \"id\": str(uuid.uuid4()),\n        \"first_name\": \"Jermain\",\n        \"last_name\": \"Defoe\",\n        \"email\": \"jermaind@gmail.com\",\n        \"password\": \"password123\"\n    },\n    {\n        \"id\": str(uuid.uuid4()),",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "bookings_data",
        "kind": 5,
        "importPath": "api.seed",
        "description": "api.seed",
        "peekOfCode": "bookings_data = [\n    {\n        \"user_id\": users_data[2][\"id\"],\n        \"flight_number\": flights_data[1][\"flight_number\"],\n        \"booking_id\": uuid.uuid4()\n    },\n    {\n        \"user_id\": users_data[1][\"id\"],\n        \"flight_number\": flights_data[0][\"flight_number\"],\n        \"booking_id\": uuid.uuid4()",
        "detail": "api.seed",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "api.utils",
        "description": "api.utils",
        "peekOfCode": "def admin_required(f):\n    @wraps(f)\n    def admin_token_check(*args, **kwargs):\n        token = request.cookies.get(\"token\")\n        if token:\n            try:\n                decoded_token = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\n                if decoded_token.get(\"admin\"):\n                    return f(*args, **kwargs)\n                else:",
        "detail": "api.utils",
        "documentation": {}
    },
    {
        "label": "admin_or_user_id_required",
        "kind": 2,
        "importPath": "api.utils",
        "description": "api.utils",
        "peekOfCode": "def admin_or_user_id_required(f):\n    @wraps(f)\n    def admin_or_user_check(user_id):\n        token = request.cookies.get(\"token\")\n        if token:\n            try:\n                decoded_token = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\n                if decoded_token[\"sub\"] != str(user_id):\n                    if decoded_token.get(\"admin\"):\n                        return f(user_id)",
        "detail": "api.utils",
        "documentation": {}
    },
    {
        "label": "require_admin_or_user_to_book_a_flight",
        "kind": 2,
        "importPath": "api.utils",
        "description": "api.utils",
        "peekOfCode": "def require_admin_or_user_to_book_a_flight(f):\n    @wraps(f)\n    def admin_or_user_check(*args, **kwargs):\n        token = request.cookies.get(\"token\")\n        if token:\n            try:\n                decoded_token = jwt.decode(token, os.getenv(\"SECRET_KEY\"), algorithms=[\"HS256\"])\n                if decoded_token['sub'] != request.json['user_id']:\n                    if decoded_token.get('admin'):\n                        return f()",
        "detail": "api.utils",
        "documentation": {}
    }
]